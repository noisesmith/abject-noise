@title fm synthesis composition

@s preface

<p>
Using literate programming.
</p>
<small>
(using the "lit" program, from <a href="https://github.com/zyedidia/Literate">zyedidia</a>, written in D)
</small>

@s introduction, setup

<p>
The goal is to have an electronic music composition, created from source code,
where I am less likely to lose context.
</p>

@s the score - comprising The instruments we invoke, and their timings

@comment_type ;;; %s
--- score
;; a buzz harmonic
f 1 0 32768 10 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 0.05

i "fm_a_tinny"   0    100    -5   0
i "fm_b_tinny"  10.14  89     0  -7
i "blaster_a"   12.2    3   -10   0
i "buzz_a"      14.5   70    -5 -15
i "buzz_a"      15.1   70   -15  -5
i "buzz_b"      44.825 70   -15  -5
i "buzz_b"      45.02  70    -5 -15
i "rumbly_a"    51.125 30    -5 -15
i "rumbly_a"    52     30   -15  -5
i "wobble_a"    64.125 20   -15  -5
i "wobble_a"    66.3   20    -5 -15
---


@s the synth


In the body of the instrument, we combine the parameters to create args to synthesis "opcodes".
This same body will be shared by multiple instruments, with different parameter settings.

@comment_type ;;; %s
--- synth body
  amod       poscil3 aidx1, amod1
  a1         poscil3 aidx, acar1+amod
  aclean     poscil3 ampdb(again), acar+a1, 1
  adist      limit aclean, -1, 1
  al         = adist*ampdbfs(adb+p4)
  ar         = adist*ampdbfs(adb+p5)
             out al, ar
---

@s the first instrument

@comment_type ;;; %s
--- fm a tinny
    instr    fm_a_tinny
;; fixed parameters
  amod1      = 3060.3
  acar1      = 503.293880
  aidx       = 402
  acar       = 0.02

;; then come the various curves.

  aidx1       lna 70, 121, 0.92, 0.08, p3
  again       lna -0.5, 3.0525, 0.9, 0.1, p3
  adb         lna -65, -15, 0.01, 0.25, p3
@{synth body}
    endin
---

@s another instrument

@comment_type ;;; %s
--- fm b tinny
    instr    fm_b_tinny ; another fm generator
  amod1      lna 0, 3060.3, 0.5, 0.5, p3
  acar1      lna 503.293880, 0, 0.7, 0.3, p3
  aidx       = 402
  acar       = 0.2
  aidx1      lna 70, 121, 0.92, 0.08, p3
  again      lna -0.5, 5.0525, 0.9, 0.1, p3
  adb        lna -65, -15, 0.01, 0.25, p3

@{synth body}
    endin
---

@s more
@comment_type ;;; %s
--- blaster a
    instr    blaster_a
  amod1      = 2000
  acar1      = 700
  aidx       = 1000
  acar       = 43.77
  aidx1      = 212
  again      = 10.3
  adb        = -30

@{synth body}
    endin
---

@s and all the rest
--- buzz a
      instr buzz_a
    amod1  =      246.723101
    acar1  =      263.594866
    aidx   =      110.454060
    acar   =      34.777638
    aidx1  =      528.354883
    again  =      0.000000
    adb    lna -65, p4, 0.1, 0.25, p3
@{synth body}
    endin
---

--- buzz b
      instr buzz_b
    amod1  =      749.443233
    acar1  =      487.750560
    aidx   =      130.289540
    acar   =      119.153678
    aidx1  =      603.563488
    again  =      0.000000
    adb    lna -65, p4, 0.1, 0.25, p3
@{synth body}
    endin
---

--- rumbly a
      instr rumbly_a
    amod1   =       118.040092
    acar1   =       40.089086
    aidx    =       159.242764
    acar    =       47.884189
    aidx1   =       115.812920
    again   =       0.000000
    adb    lna -65, p4, 0.1, 0.25, p3
@{synth body}
    endin
---


--- wobble a
      instr wobble_a
    amod1   =       118.040092
    amod1   =       83.518930
    acar1   =       223.830730
    aidx    =       122.494429
    acar    =       0.000000
    aidx1   =       278.396428
    again   =       3.589744
    adb    lna -65, p4, 0.1, 0.25, p3
@{synth body}
    endin
---

---
@s udos
These UDOs help make curves that are more intuitive to me.

<p>
The parameters to
<a href="file:///usr/share/doc/csound-doc/html/linen.html">linen</a>
are amplitude, rise time, total duration, and decay time.
</p>
<p></p>
<p>
The parameters to this opcode: <code>min, max, fade-in, fade-out, duration</code>
make more sense to me.
</p>

@comment_type ;;; %s
--- udos
    opcode lna, a,iiiii
  imn, imx, iin, iiout, idur \
    xin
  aout linen (imx-imn), idur*iin, idur, idur*iiout
         ; between multiplying by (mx-mn), and adding mn back to out,
         ; we effectively spread the linen output between mn and mx
    xout aout+imn
    endop
---

@s the parent document

@comment_type ;;; %s
--- orc headers --- noWeave
  sr         =  48000
  ksmps      =  512
  nchnls     =  2
  0dbfs      =  1
---

@comment_type ;;; %s
--- cli opts --- noWeave
-Lstdin
-+rtaudio=jack
-odac
-iadc
-b 1024
-B 2048
---

@comment_type ;;; %s
@code_type csound .csd
--- composition.csd
<CsoundSynthesizer>
<CsOptions>
@{cli opts}
</CsOptions>
<CsInstruments>

@{orc headers}

@{udos}

@{fm a tinny}
@{fm b tinny}
@{blaster a}
@{buzz a}
@{buzz b}
@{rumbly a}
@{wobble a}

</CsInstruments>
<CsScore>

@{score}

e
</CsScore>
</CsoundSynthesizer>
---

@s preview, sculpt, audition
<p>
The rte.csd document is fed via osc, I use it with simple-stage-control. It creates the same
sound pallette as used with the composition, and can print out code to fill in the top
part of an instrument when I've dialed in a texture.
</p>

<p>
These are the same parameters that differentiate each instrument defined in this composition.
</p>
--- synth parameters
    amod1  oscvar "/mod1", 0, 0, 1000
    acar1  oscvar "/car1", 0, 0, 1000
    aidx   oscvar "/idx", 0, 0, 1000
    acar   oscvar "/car", 0, 0, 1000
    aidx1  oscvar "/idx1", 0, 0, 1000
    again  oscvar "/gain", 0, 0, 30
    adb    oscvar "/amp", -65, -65, 0
    kmute  oscvark "/mute", 0, 1, 0
---

<p>
The parameter display is the main useful thing about the rte csd - it allows a quick feedback
loop from experimentation to composition.
</p>
--- display parameters
    kdisp  oscvark "/display", 0, 0, 1
    kdp    changed kdisp
           ;; print a structured block of code that can be pasted
           ;; to create a new instrument
           printf \
{{
    amod1   =       %f
    acar1   =       %f
    aidx    =       %f
    acar    =       %f
    aidx1   =       %f
    again   =       %f
}}, \
                  kdisp*kdp, k(amod1),  k(acar1), k(aidx),  k(acar),  k(aidx1),   k(again)
---


--- debug / audition
  gilisten   OSCinit 4445

    opcode oscvar, a, Siii
  Spath, iini, ilo, ihi \
             xin
@{osc read loop}
    iscale   = ihi - ilo
    kval     port (kin*iscale)+ilo, 0.15
             xout a(kval)
    endop

    opcode oscvark, k, Siii
  Spath, iini, ilo, ihi \
             xin
@{osc read loop}
    iscale   = ihi - ilo
             xout (kin*iscale)+ilo
    endop

    instr 9999
@{synth parameters}
@{display parameters}
    kexit  oscvark "/exit", 0, 0, 1
           scoreline "e", kexit
    amod   poscil3 aidx1, amod1
    a1     poscil3 aidx, acar1+amod
    aclean poscil3 ampdb(again), acar+a1, 1
    adist  limit aclean, -1, 1
    aout   = adist*ampdbfs(adb)*kmute
           outs aout, aout
    endin
---

<p>
The osc read loop is needed because multiple osc events can appear in one k cycle.
--- osc read loop
  kin        init iini
next:
  kk         OSClisten gilisten, Spath, "f", kin
if (kk == 0) goto done
             kgoto next
done:
---

@comment_type ;;; %s
@code_type csound .csd
--- rte.csd
<CsoundSynthesizer>
<CsOptions>
@{cli opts}
</CsOptions>
<CsInstruments>

@{orc headers}

@{debug / audition}

</CsInstruments>
<CsScore>

;; a buzz harmonic
f 1 0 32768 10 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 0.05

;; for playing around
i 9999 0 360000

e
</CsScore>
</CsoundSynthesizer>
---
